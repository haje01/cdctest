import time

INSERTER = 5
SELECTOR = 5
BATCH = 100
EPOCH = 100

rule setup:
    """시스템 설치."""
    output: "temp/setup.json"
    shell:
        """
        cd deploy
        TF_VAR_private_key=$KFKTEST_SSH_PKEY terraform apply -var-file=test.tfvars -auto-approve
        terraform output -json > ../{output}
        """

rule copy_setup:
    """설치 정보 복사.

    로컬에서 수행한 설치 결과 파일을 insert / select 하는 노드로 복사.

    """
    input:
        "temp/setup.json"
    output:
        "temp/copy_setup"
    shell:
        """
        # Inserter
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$KFKTEST_SSH_PKEY
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd kfktest/mssql && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:kfktest/mssql/{input}
        # Selector
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd kfktest/mssql && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:kfktest/mssql/{input}
        touch {output}
        # Consumer
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd kfktest/mysql && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:kfktest/mysql/{input}
        touch {output}
        """

rule inserter:
    """더미 데이터 인서트.

    인서트 전용 노드에서 실행.

    """
    input:
        "temp/setup.json",
        "temp/copy_setup",
        "temp/reset_table"
    output:
        "temp/inserter_{pid}"
    params:
        pid="{pid}",
        epoch=EPOCH,
        batch=BATCH
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$KFKTEST_SSH_PKEY
        ssh ubuntu@$ip -i $pkey "cd kfktest/mssql && python3 inserter.py temp/setup.json {params.pid} {params.epoch} {params.batch} > {output}"
        scp -i $pkey ubuntu@$ip:kfktest/mssql/{output} {output}
        """


rule selector:
    """더미 데이터 셀렉트.

    셀렉트 전용 노드에서 실행

    """
    input:
        "temp/setup.json",
        "temp/copy_setup"
    output:
        "temp/selector_{pid}"
    params:
        pid="{pid}"
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        pkey=$KFKTEST_SSH_PKEY
        ssh ubuntu@$ip -i $pkey "cd kfktest/mssql && python3 selector.py temp/setup.json {params.pid} > {output}"
        scp -i $pkey ubuntu@$ip:kfktest/mssql/{output} {output}
        """


rule reset_table:
    """인서트용 테이블 초기화."""
    input:
        "temp/setup.json"
    output:
        "temp/reset_table"
    script:
        "reset_table.py"


rule pump:
    """DB insert 와 select 를 수행."""
    input:
        expand("temp/inserter_{pid}", pid=(range(INSERTER))),
        expand("temp/selector_{pid}", pid=(range(SELECTOR)))
    params:
        start_time = time.time()
    output:
        "temp/pump"
    script:
        "pump.py"


rule clear:
    """테스트 결과물 제거."""
    output:
        "temp/clear"
    shell:
        """
        # Inserter
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$KFKTEST_SSH_PKEY
        ssh ubuntu@$ip -i $pkey "pkill python3" || true
        # Selector
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        ssh ubuntu@$ip -i $pkey "pkill python3" || true
        rm -f temp/reset_table
        rm -f temp/inserter_*
        rm -f temp/selector_*
        rm -f temp/pump
        rm -f temp/start_time
        touch {output}
        """

rule destroy:
    """시스템 제거."""
    output:
        "temp/destroy"
    shell:
        """
        rm -fr temp
        mkdir temp
        cd deploy
        TF_VAR_private_key=$KFKTEST_SSH_PKEY terraform destroy -var-file=test.tfvars -auto-approve
        touch ../{output}
        """