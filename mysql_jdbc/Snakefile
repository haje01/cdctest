import time

INSERTER = 5
SELECTOR = 5
BATCH = 100
EPOCH = 100

rule setup:
    """시스템 설치."""
    output: "temp/setup.json"
    shell:
        """
        cd deploy
        terraform apply -var-file=test.tfvars -auto-approve
        terraform output -json > ../{output}
        """

rule copy_setup:
    """설치 정보 복사.

    로컬에서 수행한 설치 결과 파일을 insert / select 하는 노드로 복사.

    """
    input:
        "temp/setup.json"
    output:
        "temp/copy_setup"
    shell:
        """
        # Inserter
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:cdctest/mysql_jdbc/{input}
        # Selector
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:cdctest/mysql_jdbc/{input}
        # Consumer
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && mkdir -p temp"
        scp -i $pkey {input} ubuntu@$ip:cdctest/mysql_jdbc/{input}
        touch {output}
        """


rule create_topic:
    """DB 내용을 저장할 토픽 생성."""
    input:
        "temp/setup.json",
    output:
        "temp/create_topic"
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .consumer_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        kafka_ip=$(cat temp/setup.json | jq -r .kafka_private_ip.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "/home/ubuntu/kafka_2.13-3.0.0/bin/kafka-topics.sh --create --topic my_topic_person --bootstrap-server $kafka_ip:9092 --partitions 12 --replication-factor 1"
        touch {output}
        """


rule delete_topic:
    """DB 내용을 저장할 토픽 제거."""
    input:
        "temp/setup.json",
    output:
        "temp/delete_topic"
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .consumer_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        kafka_ip=$(cat temp/setup.json | jq -r .kafka_private_ip.value)
        ssh -o "StrictHostKeyChecking=no" ubuntu@$ip -i $pkey "/home/ubuntu/kafka_2.13-3.0.0/bin/kafka-topics.sh --delete --topic my_topic_person --bootstrap-server $kafka_ip:9092" > {output}
        rm temp/create_topic
        """


rule inserter:
    """더미 데이터 인서트.

    인서트 전용 노드에서 실행.

    """
    input:
        "temp/setup.json",
        "temp/copy_setup",
        "temp/reset_table",
        "temp/create_topic"
    output:
        "temp/inserter_{pid}"
    params:
        pid="{pid}",
        epoch=EPOCH,
        batch=BATCH
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && python3 inserter.py temp/setup.json {params.pid} {params.epoch} {params.batch} > {output}"
        scp -i $pkey ubuntu@$ip:cdctest/mysql_jdbc/{output} {output}
        """


rule selector:
    """더미 데이터 셀렉트.

    셀렉트 전용 노드에서 실행

    """
    input:
        "temp/setup.json",
        "temp/copy_setup"
    output:
        "temp/selector_{pid}"
    params:
        pid="{pid}"
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && python3 selector.py temp/setup.json {params.pid} > {output}"
        scp -i $pkey ubuntu@$ip:cdctest/mysql_jdbc/{output} {output}
        """


rule reset_table:
    """인서트용 테이블 초기화."""
    input:
        "temp/setup.json"
    output:
        "temp/reset_table"
    script:
        "reset_table.py"


rule pump:
    """DB insert 와 select 수행."""
    input:
        expand("temp/inserter_{pid}", pid=(range(INSERTER))),
        expand("temp/selector_{pid}", pid=(range(SELECTOR)))
    params:
        start_time = time.time()
    output:
        "temp/pump"
    script:
        "pump.py"


rule consume:
    """DB insert 결과를 카프카 토픽 컨슘으로 확인."""
    input:
        "temp/copy_setup",
        "temp/pump"
    output:
        "temp/consume_{pid}"
    params:
        pid="{pid}",
    shell:
        """
        ip=$(cat temp/setup.json | jq -r .consumer_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh ubuntu@$ip -i $pkey "cd cdctest/mysql_jdbc && python3 consumer.py temp/setup.json > {output}"
        scp -i $pkey ubuntu@$ip:cdctest/mysql_jdbc/{output} {output}
        """


rule clear:
    """테스트 결과물 제거."""
    output:
        "temp/clear"
    shell:
        """
        # Inserter
        ip=$(cat temp/setup.json | jq -r .inserter_public_ip.value)
        pkey=$(cat temp/setup.json | jq -r .private_key_path.value)
        ssh ubuntu@$ip -i $pkey "pkill python3" || true
        # ssh ubuntu@$ip -i $pkey "rm -f cdctest/mysql_jdbc/temp/inserter_*"
        # Selector
        ip=$(cat temp/setup.json | jq -r .selector_public_ip.value)
        ssh ubuntu@$ip -i $pkey "pkill python3" || true
        # ssh ubuntu@$ip -i $pkey "rm -f cdctest/mysql_jdbc/temp/selector_*"
        rm -f temp/reset_table
        rm -f temp/inserter_*
        rm -f temp/selector_*
        rm -f temp/pump
        rm -f temp/start_time
        touch {output}
        """

rule destroy:
    """시스템 제거."""
    output:
        "temp/destroy"
    shell:
        """
        rm -fr temp
        mkdir temp
        cd deploy
        terraform destroy -var-file=test.tfvars -auto-approve
        touch ../{output}
        """